name: Build Components

on:
  workflow_dispatch:
    inputs:
      component:
        description: '选择要构建的组件'
        required: true
        type: choice
        options:
          - all
          - mysql
          - zabbix
          - nginx
          - neo4j
          - influxdb
          - elasticsearch
      version:
        description: '组件版本号（all时忽略此项）'
        required: false
        type: string
      platform:
        description: '平台名称'
        required: true
        default: 'Enterprise Linux'
        type: string
      vendor:
        description: '供应商名称'
        required: true
        default: 'Your Company'
        type: string

env:
  MYSQL_DEFAULT_VERSION: '8.0.37'
  ZABBIX_DEFAULT_VERSION: '6.4.10'
  NGINX_DEFAULT_VERSION: '1.24.0'
  NEO4J_DEFAULT_VERSION: '5.13.0'
  INFLUXDB_DEFAULT_VERSION: '2.7.3'
  ES_DEFAULT_VERSION: '8.11.3'

jobs:
  build:
    strategy:
      fail-fast: false  # 一个组件失败不影响其他组件
      matrix:
        component: ${{ fromJson(github.event.inputs.component == 'all' && '["mysql", "zabbix", "nginx", "neo4j", "influxdb", "elasticsearch"]' || format('["{0}"]', github.event.inputs.component)) }}
    
    runs-on: ubuntu-20.04
    timeout-minutes: 720  # 12小时超时
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 检查目录结构
        run: |
          echo "检查目录结构..."
          ls -la
          echo "检查 builders 目录..."
          ls -la builders/
          echo "检查各组件目录..."
          for component in mysql nginx zabbix neo4j influxdb elasticsearch; do
            echo "检查 $component 目录..."
            ls -la builders/$component/ || echo "目录不存在: $component"
          done

      - name: 创建必要目录
        run: |
          echo "创建必要目录..."
          mkdir -p output
          for component in mysql nginx zabbix neo4j influxdb elasticsearch; do
            mkdir -p "builders/$component"
            if [ ! -f "builders/$component/build.sh" ]; then
              echo "错误: 缺少构建脚本 builders/$component/build.sh"
              exit 1
            fi
          done
          chmod 777 output

      - name: 设置脚本权限
        run: |
          chmod +x build.sh
          chmod -R +x builders/*/build.sh
          ls -la builders/*/build.sh

      - name: 设置时间戳
        run: echo "BUILD_TIME=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_ENV

      - name: 配置系统
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo fallocate -l 16G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo sysctl -w vm.swappiness=80
          echo "MAKEFLAGS=-j$(nproc)" >> $GITHUB_ENV
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

      - name: 设置构建环境
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget

      - name: 准备构建
        run: |
          # 设置版本号
          VERSION="${{ github.event.inputs.version }}"
          if [ -z "$VERSION" ]; then
            case "${{ matrix.component }}" in
              "mysql")
                VERSION="${{ env.MYSQL_DEFAULT_VERSION }}"
                ;;
              "zabbix")
                VERSION="${{ env.ZABBIX_DEFAULT_VERSION }}"
                ;;
              "nginx")
                VERSION="${{ env.NGINX_DEFAULT_VERSION }}"
                ;;
              "neo4j")
                VERSION="${{ env.NEO4J_DEFAULT_VERSION }}"
                ;;
              "influxdb")
                VERSION="${{ env.INFLUXDB_DEFAULT_VERSION }}"
                ;;
              "elasticsearch")
                VERSION="${{ env.ES_DEFAULT_VERSION }}"
                ;;
            esac
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: 构建组件
        run: |
          sudo bash build.sh ${{ matrix.component }} $VERSION

      - name: 上传构建产物
        if: success() || failure()  # 即使失败也上传日志
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.component }}-${{ env.VERSION }}-${{ env.BUILD_TIME }}-build-artifacts
          path: |
            output/
            **/CMakeFiles/CMakeError.log
            **/CMakeFiles/CMakeOutput.log
          retention-days: 7

      - name: 创建 Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ matrix.component }}-${{ env.VERSION }}-${{ env.BUILD_TIME }}
          name: ${{ matrix.component }} ${{ env.VERSION }} (Built at ${{ env.BUILD_TIME }})
          files: |
            output/${{ matrix.component }}-${{ env.VERSION }}-linux-x86_64.tar.gz
            output/${{ matrix.component }}-${{ env.VERSION }}-linux-x86_64.sha256
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 清理 Docker 资源
        if: always()
        run: |
          echo "清理 Docker 容器..."
          docker ps -aq | xargs -r docker rm -f
          echo "清理 Docker 镜像..."
          docker images -q | xargs -r docker rmi -f
          echo "清理 Docker 系统..."
          docker system prune -af --volumes 